// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
	reflect "reflect"
)

// MockPostgresClient is a mock of PostgresClient interface
type MockPostgresClient struct {
	ctrl     *gomock.Controller
	recorder *MockPostgresClientMockRecorder
}

// MockPostgresClientMockRecorder is the mock recorder for MockPostgresClient
type MockPostgresClientMockRecorder struct {
	mock *MockPostgresClient
}

// NewMockPostgresClient creates a new mock instance
func NewMockPostgresClient(ctrl *gomock.Controller) *MockPostgresClient {
	mock := &MockPostgresClient{ctrl: ctrl}
	mock.recorder = &MockPostgresClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPostgresClient) EXPECT() *MockPostgresClientMockRecorder {
	return m.recorder
}

// GetConnection mocks base method
func (m *MockPostgresClient) GetConnection() *sqlx.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnection")
	ret0, _ := ret[0].(*sqlx.DB)
	return ret0
}

// GetConnection indicates an expected call of GetConnection
func (mr *MockPostgresClientMockRecorder) GetConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnection", reflect.TypeOf((*MockPostgresClient)(nil).GetConnection))
}

// Stop mocks base method
func (m *MockPostgresClient) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockPostgresClientMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockPostgresClient)(nil).Stop))
}
