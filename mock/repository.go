// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	repository "github.com/Toshik1978/go-rest-api/repository"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAccountRepository is a mock of AccountRepository interface
type MockAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepositoryMockRecorder
}

// MockAccountRepositoryMockRecorder is the mock recorder for MockAccountRepository
type MockAccountRepositoryMockRecorder struct {
	mock *MockAccountRepository
}

// NewMockAccountRepository creates a new mock instance
func NewMockAccountRepository(ctrl *gomock.Controller) *MockAccountRepository {
	mock := &MockAccountRepository{ctrl: ctrl}
	mock.recorder = &MockAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountRepository) EXPECT() *MockAccountRepositoryMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockAccountRepository) GetAll(ctx context.Context) ([]repository.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]repository.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockAccountRepositoryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockAccountRepository)(nil).GetAll), ctx)
}

// Store mocks base method
func (m *MockAccountRepository) Store(ctx context.Context, account *repository.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store
func (mr *MockAccountRepositoryMockRecorder) Store(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockAccountRepository)(nil).Store), ctx, account)
}

// UpdateBalance mocks base method
func (m *MockAccountRepository) UpdateBalance(ctx context.Context, uid string, incr int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalance", ctx, uid, incr)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalance indicates an expected call of UpdateBalance
func (mr *MockAccountRepositoryMockRecorder) UpdateBalance(ctx, uid, incr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockAccountRepository)(nil).UpdateBalance), ctx, uid, incr)
}

// MockPaymentRepository is a mock of PaymentRepository interface
type MockPaymentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentRepositoryMockRecorder
}

// MockPaymentRepositoryMockRecorder is the mock recorder for MockPaymentRepository
type MockPaymentRepositoryMockRecorder struct {
	mock *MockPaymentRepository
}

// NewMockPaymentRepository creates a new mock instance
func NewMockPaymentRepository(ctrl *gomock.Controller) *MockPaymentRepository {
	mock := &MockPaymentRepository{ctrl: ctrl}
	mock.recorder = &MockPaymentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPaymentRepository) EXPECT() *MockPaymentRepositoryMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockPaymentRepository) GetAll(ctx context.Context) ([]repository.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]repository.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockPaymentRepositoryMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPaymentRepository)(nil).GetAll), ctx)
}

// Store mocks base method
func (m *MockPaymentRepository) Store(ctx context.Context, payment *repository.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, payment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store
func (mr *MockPaymentRepositoryMockRecorder) Store(ctx, payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockPaymentRepository)(nil).Store), ctx, payment)
}

// MockScope is a mock of Scope interface
type MockScope struct {
	ctrl     *gomock.Controller
	recorder *MockScopeMockRecorder
}

// MockScopeMockRecorder is the mock recorder for MockScope
type MockScopeMockRecorder struct {
	mock *MockScope
}

// NewMockScope creates a new mock instance
func NewMockScope(ctrl *gomock.Controller) *MockScope {
	mock := &MockScope{ctrl: ctrl}
	mock.recorder = &MockScopeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScope) EXPECT() *MockScopeMockRecorder {
	return m.recorder
}

// WithContext mocks base method
func (m *MockScope) WithContext(ctx context.Context) (context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithContext", ctx)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithContext indicates an expected call of WithContext
func (mr *MockScopeMockRecorder) WithContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithContext", reflect.TypeOf((*MockScope)(nil).WithContext), ctx)
}

// Complete mocks base method
func (m *MockScope) Complete(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Complete", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Complete indicates an expected call of Complete
func (mr *MockScopeMockRecorder) Complete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Complete", reflect.TypeOf((*MockScope)(nil).Complete), ctx)
}

// Cancel mocks base method
func (m *MockScope) Cancel(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cancel indicates an expected call of Cancel
func (mr *MockScopeMockRecorder) Cancel(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockScope)(nil).Cancel), ctx)
}

// MockFactory is a mock of Factory interface
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
}

// MockFactoryMockRecorder is the mock recorder for MockFactory
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// Scope mocks base method
func (m *MockFactory) Scope() repository.Scope {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scope")
	ret0, _ := ret[0].(repository.Scope)
	return ret0
}

// Scope indicates an expected call of Scope
func (mr *MockFactoryMockRecorder) Scope() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scope", reflect.TypeOf((*MockFactory)(nil).Scope))
}

// AccountRepository mocks base method
func (m *MockFactory) AccountRepository() repository.AccountRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountRepository")
	ret0, _ := ret[0].(repository.AccountRepository)
	return ret0
}

// AccountRepository indicates an expected call of AccountRepository
func (mr *MockFactoryMockRecorder) AccountRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountRepository", reflect.TypeOf((*MockFactory)(nil).AccountRepository))
}

// PaymentRepository mocks base method
func (m *MockFactory) PaymentRepository() repository.PaymentRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PaymentRepository")
	ret0, _ := ret[0].(repository.PaymentRepository)
	return ret0
}

// PaymentRepository indicates an expected call of PaymentRepository
func (mr *MockFactoryMockRecorder) PaymentRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PaymentRepository", reflect.TypeOf((*MockFactory)(nil).PaymentRepository))
}
